# todo: test 2 paths, dsp0 and dsp1 is easiest, then within a path
#  try with a loop send/return
# see how switches end up - make sure "1" gets selected if there's a 0/1 choice
# does the helix round numbers or truncate them when suing switches rather than continuous numbers?
# how to tell automatically which controls do what ?
#  build a library of blocks for algorithmic combining
# generate small variations on a preset's existng settings
# a tool to copy command centre sections between presets


import sys, os, json, random, math


def makehlx():
	preset = "EQSnap"
	with open(os.path.expanduser("presets/"+preset+".hlx"), "r") as f:
		preset_dict = json.load(f)
		
		# swap block positions
		block_positions = [i for i in range(8)] # only use 7 positions, leave 8 for vol pedal
		random.shuffle(block_positions)
		print(block_positions)
		for blockname in preset_dict["data"]["tone"]["controller"]["dsp0"]:
			if blockname.startswith("block"):
			# if preset_dict["data"]["tone"]["dsp0"][blockname]["@model"] != "HD2_VolPanVol":
				preset_dict["data"]["tone"]["dsp0"][blockname]["@position"] = block_positions.pop()
				# save snapshot params for some other time
				block_dict = {}
				# block_dict["data"] = ""
				block_dict["SnapshotParams"] = preset_dict["data"]["tone"]["snapshot0"]["controllers"]["dsp0"][blockname]
				block_dict["Ranges"] = preset_dict["data"]["tone"]["controller"]["dsp0"][blockname]
				block_filename = preset_dict["data"]["tone"]["dsp0"][blockname]["@model"]
				with open(os.path.expanduser("blocks/"+block_filename), "w") as json_file:
					json.dump(block_dict, json_file, indent=4)
				print(blockname)

		for snapshot_num in range(8):
			target_snapshot = "snapshot" + str(snapshot_num)
			# snapshot ledcolor
			preset_dict["data"]["tone"][target_snapshot]["@ledcolor"] = str(snapshot_num + 1)
			print(snapshot_num)
			for blockname in preset_dict["data"]["tone"]["controller"]["dsp0"]:	
				print(blockname)	
				# for control parameter max and mins
				prototype_block = preset_dict["data"]["tone"]["controller"]["dsp0"][blockname]
				
				# block to edit
				snapshot_block = preset_dict["data"]["tone"][target_snapshot]["controllers"]["dsp0"][blockname]

				for parameter, v in prototype_block.items():
					min = prototype_block[parameter]["@min"]
					max = prototype_block[parameter]["@max"]
					# do the right thing for the kind of parameter
					if isinstance(min, bool):
						result = random.choice([True,False])
					elif min == 0 and max > 1:
						result = random.randint(min, max)
					else:
						result = random.uniform(min, max)
					snapshot_block[parameter]["@value"] = result
					print(result)
		

		# new_dict = {}

		# for key, value in preset_dict.items():
		# 	match key:
		# 		case "block0":
		# 			new_dict["block1"] = value
		# 		case "block1":
		# 			new_dict["block0"] = value
		# 		case _:
		# 			new_dict[key] = value

		with open(os.path.expanduser("presets/Test.hlx"), "w") as json_file:
			json.dump(preset_dict, json_file, indent=4)

makehlx()
